From 1c03016d480e0bad09e3c1c0925fbb40645e562d Mon Sep 17 00:00:00 2001
From: ishita <iv447@nyu.edu>
Date: Mon, 20 Nov 2017 14:26:02 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  3 ++-
 proc.c    | 67 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 25 ++++++++++++++++++++++--
 user.h    |  3 +++
 usys.S    |  2 ++
 8 files changed, 99 insertions(+), 5 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..57ae515 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+        _lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -242,7 +243,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\lotterytest.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/proc.c b/proc.c
index b122e3b..406032e 100644
--- a/proc.c
+++ b/proc.c
@@ -50,6 +50,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets=10;
+
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -265,7 +267,7 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
-void
+/*void
 scheduler(void)
 {
   struct proc *p;
@@ -281,6 +283,7 @@ scheduler(void)
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    
       if(p->state != RUNNABLE)
         continue;
 
@@ -301,6 +304,66 @@ scheduler(void)
     release(&ptable.lock);
 
   }
+}*/
+
+int 
+totaltickets(void) {
+	struct proc *p;
+	int total = 0;
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+		if (p->state == RUNNABLE) {
+			total += p->tickets;
+		}
+	}
+	return total;
+}
+
+void
+scheduler(void)
+{
+  struct proc *p;
+  unsigned long random_num;
+  int sum,total_tickets;
+
+  for(;;)
+      {
+
+         total_tickets = totaltickets();
+
+         random_num = random_at_most(17845);
+
+         if(total_tickets > 0)
+             random_num %= total_tickets;
+         else
+             random_num = 0;
+         
+         sum = 0;
+
+         sti();
+
+         acquire(&ptable.lock);
+         for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+         {
+				
+              if(p->state != RUNNABLE)
+                 continue;
+              if(p->tickets + sum <= random_num ) {
+	              sum += p->tickets;
+	              continue;
+                  }
+
+              proc = p;
+	      switchuvm(p);
+	      p->state = RUNNING;
+	      swtch(&cpu->scheduler, p->context);
+	      switchkvm();
+
+              proc = 0;
+
+         }
+
+         release(&ptable.lock);
+      }
 }
 
 // Enter scheduler.  Must hold only ptable.lock
@@ -463,7 +526,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %s tickets : %d", p->pid, state, p->name,p -> tickets);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 3b9c3ac..9ac4a0c 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 // Tickets for lottery scheduling
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..23cac3b 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -78,12 +78,11 @@ sys_sleep(void)
 }
 
 // return how many clock tick interrupts have occurred
-// since start.
+// since start.ll
 int
 sys_uptime(void)
 {
   uint xticks;
-  
   acquire(&tickslock);
   xticks = ticks;
   release(&tickslock);
@@ -98,3 +97,25 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int
+sys_settickets(void) {
+  int ntickets;
+  if(argint(0,&ntickets)<0)
+    return -1;
+
+  if(ntickets<=0)
+    return -1;
+
+  
+  
+  proc->tickets=ntickets;
+  
+  return 0;
+  
+  /* int num; */
+  /* fetchint(p, */
+
+  /* return *pid; */
+}
+
diff --git a/user.h b/user.h
index 46d1059..004959a 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,9 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
+
+
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..ceac342 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,5 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
+
-- 
1.9.1

